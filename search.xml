<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Oracle批量事务更新大量数据</title>
      <link href="2020/10/21/oracle-batch-commit/"/>
      <url>2020/10/21/oracle-batch-commit/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在工作中曾经遇到过需要更新生产环境中一张千万级别的表数据，直接全表用update效率太低了，写了一个脚本来实现分批数据更新，更新了千万级别数据大概需要10分钟</p></blockquote><pre><code class="sql">--打开日志信息输出到控制台SET SERVEROUTPUT ON;DECLARE    --声明数组，存放主键id    TYPE t_id IS TABLE OF CVSDB.BVS_UNITY_MSG.ID%TYPE;    v_id t_id;    --取数游标    CURSOR cur IS    SELECT ID FROM CVSDB.BVS_UNITY_MSG WHERE MSG_TYPE = &#39;3&#39; AND SEND_STATUS = &#39;0&#39;;    --更新数量    v_cnt INTEGER := 0;BEGIN    OPEN cur;    --循环取数    LOOP    EXIT WHEN cur%NOTFOUND;    --每次批量检索结果：10000条记录    FETCH cur BULK COLLET INTO v_id LIMIT 10000;    --批量发送更新语句    FORALL i IN 1...v_id.COUNT    UPDATE CVSDB.BVS_UNITY_MSG SET SEND_STATUS = &#39;1&#39;, UPDATOR = &#39;SCRIPT_BATCH_UPD&#39;, UPDATE_TIME = CURRENT_TIMESTAMP WHERE ID = v_id(i);    COMMIT;    v_cnt := v_cnt + v_id.COUNT;    END LOOP;    CLOSE cur;    DBMS_OUTPUT.PUT_LINE(&#39;UPDATE DATA SUCCESSFULLY: &#39;||v_cnt);    --异常回滚    EXCEPTION    WHEN OTHER THEN    DBMS_OUTPUT.PUT_LINE(&#39;UPDATE DATA ERROR, ROLLBACK...&#39;);    ROLLBACK;END;/</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql踩坑记</title>
      <link href="2020/10/21/mysql-troubles/"/>
      <url>2020/10/21/mysql-troubles/</url>
      
        <content type="html"><![CDATA[<blockquote><p>MySql问题在使用的过程中问题多多，试到过是版本问题的，也有的原因是配置没配好，反正就很折腾，我把遇到的问题及解决方案汇总如下</p></blockquote><h4 id="1045-Access-denied-for-user-‘root’-…"><a href="#1045-Access-denied-for-user-‘root’-…" class="headerlink" title="1045 - Access denied for user ‘root’@…"></a>1045 - Access denied for user ‘root’@…</h4><p>虚拟机上用docker安装的镜像，另一台主机连接该服务时报了权限问题，解决方法是赋权，开发时我给所有ip授权了，根据实际需要可以替换<code>%</code>为具体的ip：</p><pre><code class="shell">docker exec -it mysql /bin/bashmysql -u root -pmysql&gt; grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;root&#39;;mysql&gt; flush privileges;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS配置SSH免密登陆GitHub</title>
      <link href="2020/09/30/sshgithub/"/>
      <url>2020/09/30/sshgithub/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用SSH协议可以连接远程服务器和服务并向它们验证。利用SSH密钥可以连接GitHub，而无需在每次访问时提供用户名或密码。在部署VuePress到GitHub的时候踩坑了，报错信息是没有权限或者没有找到仓库，但仓库是建了的，所以是没有登陆权限，需要配置一下，这里我以MacOS为例</p></blockquote><p>报错信息如下：</p><pre><code class="shell">git@github.com: Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.</code></pre><h2 id="1-先检查一下电脑是否已经有SSH-keys"><a href="#1-先检查一下电脑是否已经有SSH-keys" class="headerlink" title="1.先检查一下电脑是否已经有SSH keys"></a>1.先检查一下电脑是否已经有SSH keys</h2><p>在终端里面输入以下命令：</p><pre><code class="shell">ls -al ~/.ssh</code></pre><p>看看打印的结果是否包含有<code>.pub</code>后缀的文件，若没有，则进入第2步，若已存在，则跳到第3步</p><h2 id="2-生成密钥"><a href="#2-生成密钥" class="headerlink" title="2.生成密钥"></a>2.生成密钥</h2><h3 id="2-1-ssh-keygen"><a href="#2-1-ssh-keygen" class="headerlink" title="2.1 ssh-keygen"></a>2.1 ssh-keygen</h3><p>在终端输入以下命令，最后的参数是关联GitHub的邮箱：</p><pre><code class="shell">ssh-keygen -t rsa -b 4096 -C &quot;&lt;GitHub绑定的邮箱&gt;&quot;</code></pre><p>然后一路回车：</p><pre><code class="shell">Generating public/private rsa key pair.Enter file in which to save the key (/Users/jacklo/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/jacklo/.ssh/id_rsa.Your public key has been saved in /Users/jacklo/.ssh/id_rsa.pub.The key fingerprint is:SHA256:Jf9jJTx7sopMzA2qT0FKIdLm/MEjxAPKFDhfxKUsLS0 312321720@qq.comThe key&#39;s randomart image is:+---[RSA 4096]----+|+*ooo..          ||*.*=oo           ||.OE+* . . .      ||  ==+o   + .     ||   o.o. S . + .  ||    .  = o . =   ||      o + . * .  ||     o o . . =   ||    ... o ...    |+----[SHA256]-----+</code></pre><h3 id="2-2-将SSH-key添加至ssh-agent"><a href="#2-2-将SSH-key添加至ssh-agent" class="headerlink" title="2.2 将SSH key添加至ssh-agent"></a>2.2 将SSH key添加至ssh-agent</h3><pre><code class="shell">eval $(ssh-agent -s) # 在后台启动 ssh 代理</code></pre><h3 id="2-3-把密钥添加到ssh-agent的高速缓存中"><a href="#2-3-把密钥添加到ssh-agent的高速缓存中" class="headerlink" title="2.3 把密钥添加到ssh-agent的高速缓存中"></a>2.3 把密钥添加到ssh-agent的高速缓存中</h3><pre><code class="shell">ssh-add -K ~/.ssh/id_rsa</code></pre><h2 id="3-将公钥保存到GitHub"><a href="#3-将公钥保存到GitHub" class="headerlink" title="3.将公钥保存到GitHub"></a>3.将公钥保存到GitHub</h2><p>打开id_rsa.pub文件，将内容复制以下：</p><pre><code class="shell">view ~/.ssh/id_rsa.pub</code></pre><p>登陆GitHub-&gt;Settings-&gt;SSH and GPG keys-&gt;New SSH key，<br><code>Title</code>改一下，然后把控制台复制的内容粘贴到<code>Key</code>中，最后<code>Add SSH key</code></p><h2 id="4-测试连接"><a href="#4-测试连接" class="headerlink" title="4.测试连接"></a>4.测试连接</h2><pre><code class="shell">ssh -T git@github.comHi chikit-lo! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>终端打印类似信息即可，对于Windows或其他系统做法可能稍微有点差异，附上官方的解决方案：<a href="https://docs.github.com/cn/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh">使用 SSH 连接到 GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
            <tag> ssh </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VuePress快速搭建部署</title>
      <link href="2020/09/29/VuePress101/"/>
      <url>2020/09/29/VuePress101/</url>
      
        <content type="html"><![CDATA[<h2 id="VuePress入魔"><a href="#VuePress入魔" class="headerlink" title="VuePress入魔"></a>VuePress入魔</h2><blockquote><p>用Hexo搭建的静态博客其实已经比较好用强大了，但是美中不足的一点是网页是全局刷新的，之前在Hexo的主页上其实我是放了播放器的，点击播放音乐也没有问题，但在切换内部页面的时候浏览器一刷新歌也就没有了，这一点体验并不好，而且由于不是局部刷新，这种跳转页面带来的闪烁感也不是特别的舒服。这段时间我也刚好在学Vue，10天前才了解到有VuePress这种用Vue驱动的静态网站，体验了一下别人的网页，确实比较舒服，基本上是秒响应，而且是单页面应用，并没有那种全局刷新的问题，非常的流畅，于是在学习完Vue的基本知识之后决定再淦一次，但官方文档写得似乎有点晦涩，于是我来一个101</p></blockquote><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><h4 id="1-1-安装VuepPress"><a href="#1-1-安装VuepPress" class="headerlink" title="1.1 安装VuepPress"></a>1.1 安装VuepPress</h4><p>首先还是需要node环境的，我习惯还是局部安装：</p><pre><code class="shell">mkdir vuepress-blog &amp;&amp; cd vuepress-blog # 创建博客目录并进入npm init -y # 初始化项目npm i -D vuepress # 局部安装VuePress</code></pre><p>安装完之后可以检查一下版本信息：</p><pre><code class="shell">npx vuepress -v</code></pre><p>这是当前我的版本：<code>vuepress/1.6.0 darwin-x64 node-v12.18.4</code></p><h4 id="1-2-配置package-json"><a href="#1-2-配置package-json" class="headerlink" title="1.2 配置package.json"></a>1.2 配置package.json</h4><p>打开项目根目录的package.json，在scripts中添加两行，用于测试以及打包项目：</p><pre><code class="json">&quot;scripts&quot;: &#123;    &quot;dev&quot;: &quot;vuepress dev docs&quot;,    &quot;build&quot;: &quot;vuepress build docs&quot;&#125;</code></pre><h4 id="1-3-创建页面并Helloworld之"><a href="#1-3-创建页面并Helloworld之" class="headerlink" title="1.3 创建页面并Helloworld之"></a>1.3 创建页面并Helloworld之</h4><p>依然是项目根目录下，创建docs目录，这个目录比较关键，配置文件/静态资源等等的文件都会放在这：</p><pre><code class="shell">mkdir docs &amp;&amp; echo &#39;# Hello World VuePress&#39; &gt; docs/README.md # 创建一个页面npm run dev # 启动本地服务</code></pre><p>看到<code>success [15:48:09] Build 2f6668 finished in 139 ms! ( http://localhost:8080/ )</code>类似输出就成功了，然后浏览器访问本地8080端口，VuePress的Hello World完成了~</p><h3 id="2-VuePress目录结构"><a href="#2-VuePress目录结构" class="headerlink" title="2.VuePress目录结构"></a>2.VuePress目录结构</h3><p>官方推荐的目录结构如下：</p><pre><code class="shell">.├── docs│   ├── .vuepress (可选的)│   │   ├── components (可选的)│   │   ├── theme (可选的)│   │   │   └── Layout.vue│   │   ├── public (可选的)│   │   ├── styles (可选的)│   │   │   ├── index.styl│   │   │   └── palette.styl│   │   ├── templates (可选的, 谨慎配置)│   │   │   ├── dev.html│   │   │   └── ssr.html│   │   ├── config.js (可选的)│   │   └── enhanceApp.js (可选的)│   │ │   ├── README.md│   ├── guide│   │   └── README.md│   └── config.md│ └── package.json</code></pre><p>官方给的目录介绍如下：<br>docs/.vuepress: 用于存放全局的配置、组件、静态资源等<br>docs/.vuepress/components: 该目录中的 Vue 组件将会被自动注册为全局组件<br>docs/.vuepress/theme: 用于存放本地主题<br>docs/.vuepress/styles: 用于存放样式相关的文件<br>docs/.vuepress/styles/index.styl: 将会被自动应用的全局样式文件，会生成在最终的 CSS 文件结尾，具有比默认样式更高的优先级<br>docs/.vuepress/styles/palette.styl: 用于重写默认颜色常量，或者设置新的 stylus 颜色常量<br>docs/.vuepress/public: 静态资源目录<br>docs/.vuepress/templates: 存储 HTML 模板文件<br>docs/.vuepress/templates/dev.html: 用于开发环境的 HTML 模板文件<br>docs/.vuepress/templates/ssr.html: 构建时基于 Vue SSR 的 HTML 模板文件<br>docs/.vuepress/config.js: 配置文件的入口文件，也可以是 YML 或 toml<br>docs/.vuepress/enhanceApp.js: 客户端应用的增强  </p><hr><p>是不是很多问号？让我们先把文件创建好吧：</p><pre><code class="shell">mkdir .vuepress &amp;&amp; cd .vuepressmkdir components/ theme/ public/ styles/ templatestouch config.js</code></pre><p>其中，config.js这个配置文件比较重要，可以根据需要配置一些选项</p><h3 id="3-配置首页布局"><a href="#3-配置首页布局" class="headerlink" title="3.配置首页布局"></a>3.配置首页布局</h3><p><code>docs/REAMME.md</code>这个根级的markdown文件是默认的博客首页，可以添加默认主题体验一下：</p><pre><code class="yaml">---home: trueheroImage: /logo.pngheroText: Hero 标题tagline: Hero 副标题actionText: 快速上手 →actionLink: /zh/guide/features:- title: 简洁至上  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。- title: Vue驱动  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。- title: 高性能  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。footer: MIT Licensed | Copyright © 2018-present Evan You---</code></pre><p>其中，静态资源例如图片等可以放到<code>.vuepress/public</code>目录下，引用这些资源用<code>/</code>作为根路径即可，热部署后重新查看浏览器会发现主页的样式变化了，但一般我还是会使用其他大神写好的主题文件</p><h3 id="4-使用来自依赖的主题"><a href="#4-使用来自依赖的主题" class="headerlink" title="4.使用来自依赖的主题"></a>4.使用来自依赖的主题</h3><p>从GitHub中找到自己喜欢的VuePress主题后使用npm安装即可，一般安装后都需要在<code>.vuepress/config.js</code>中配置相关参数，下面列出部分我正在使用的参数项：</p><pre><code class="javascript">module.exports = &#123;  // 部署站点的基础路径，如果是根路径或者有域名映射这个可以不设  // base: &#39;/vuepress/&#39;,  // 网站的标题  title: &#39;某科学的超掉头发&#39;,   // 网站的描述  description: &#39;我是如何变强的&#39;,   // 额外的需要被注入到当前页面的 HTML &lt;head&gt; 中的标签  head: [    [&#39;link&#39;, &#123; rel: &#39;icon&#39;, href: &#39;/logo.png&#39; &#125;],    [&#39;meta&#39;, &#123; name: &#39;viewport&#39;, content: &#39;width=device-width,initial-scale=1,user-scalable=no&#39; &#125;]  ],  // 自定义主题的名称  theme: &#39;reco&#39;,  // 为当前主题提供的一些配置  themeConfig: &#123;    // 导航栏 Logo，默认从.vuepress/public目录下找    logo: &#39;/logo.png&#39;,    // 导航栏链接    nav: [      &#123; text: &#39;Home&#39;, link: &#39;/&#39;, icon: &#39;reco-home&#39; &#125;,      &#123; text: &#39;TimeLine&#39;, link: &#39;/timeline/&#39;, icon: &#39;reco-date&#39; &#125;,      &#123; text: &#39;Hexo ver.&#39;, link: &#39;https://chikit-lo.github.io&#39;, icon: &#39;reco-blog&#39; &#125;,    ],    // 自动生成侧栏    sidebar: &#39;auto&#39;&#125;</code></pre><h3 id="5-写下第一篇文章吧"><a href="#5-写下第一篇文章吧" class="headerlink" title="5.写下第一篇文章吧"></a>5.写下第一篇文章吧</h3><p>为方便管理，我会把博文统一放进一个目录下，以我的博客为例，我会在<code>docs</code>目录下新建一个目录<code>articles</code>来归类文章<br>之后只需要在该目录下新建markdown文件即可，例如我的第一篇文章可以起名为<code>hellovuepress.md</code>，保存编辑之后首页会自动显示文章</p><h3 id="6-个性化主题"><a href="#6-个性化主题" class="headerlink" title="6.个性化主题"></a>6.个性化主题</h3><p>如果想要对依赖的主题进行个性化修改，可以先将主题拷贝出来：</p><pre><code class="shell">npx vuepress eject</code></pre><p>这个指令会创建<code>docs/.vuepress/theme</code>目录，里面就是主题的组件等等，VuePress会优先读取这里面的内容，可以放心的改，不必担心依赖更新后带来的覆盖</p><h3 id="7-部署到GitHub"><a href="#7-部署到GitHub" class="headerlink" title="7.部署到GitHub"></a>7.部署到GitHub</h3><h4 id="7-1-部署脚本的准备"><a href="#7-1-部署脚本的准备" class="headerlink" title="7.1 部署脚本的准备"></a>7.1 部署脚本的准备</h4><p>官方给出了一个<code>deploy.sh</code>脚本，可以方便把项目部署到GitHub：</p><pre><code class="shell">#!/usr/bin/env sh# 确保脚本抛出遇到的错误set -e# 生成静态文件npm run build# 进入生成的文件夹cd docs/.vuepress/dist# 如果是发布到自定义域名# echo &#39;www.example.com&#39; &gt; CNAMEgit initgit add -Agit commit -m &#39;deploy&#39;# 如果发布到 https://&lt;USERNAME&gt;.github.io# git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master# 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;# git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pagescd -</code></pre><p>上面有两点需要注意：</p><ul><li>如果是放到GitHub Pages的根目录，则把<code>git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</code>这句脚本的注视放开，把里面的<code>USERNAME</code>替换为自己的GitHub账户名</li><li>如果是像我一样，已经在GitHub Pages的根路径部署过静态网页，则需要在GitHub中用另一个仓库发布，把<code>git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</code>这行脚本的注释放开，其中，<code>REPO</code>是仓库的名称，这个可以在GitHub新建一个任意名称的仓库，<code>USERNAME</code>同上<h4 id="7-2-如果有域名绑定"><a href="#7-2-如果有域名绑定" class="headerlink" title="7.2 如果有域名绑定"></a>7.2 如果有域名绑定</h4>我之前在阿里云注册了一个域名，我把默认的<code>www.bstrong.xyz</code>二级域名解析到了GitHub Pages的<code>&lt;USERNAME&gt;.github.io</code>中，现在我想把<code>&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</code>的地址解析到另一个二级域名<code>vuepress</code>中，例如：<code>vuepress.bstrong.xyz</code>，那么就需要在阿里云新增一项域名解析，同时，在<code>deploy.sh</code>中的<code>echo &#39;www.example.com&#39; &gt; CNAME</code>注释打开，把新的域名替换掉即可，而<code>.vuepress/config.js</code>中的<code>base</code>就不需要设置路径了，否则静态资源会因为路径问题找不到<h4 id="7-3-执行deploy-sh"><a href="#7-3-执行deploy-sh" class="headerlink" title="7.3 执行deploy.sh"></a>7.3 执行deploy.sh</h4>最后一步了，切换到<code>docs</code>目录下，控制台中执行：<pre><code class="shell">sh deploy.sh</code></pre>在这一步我还踩了一下坑，是SSH登陆GitHub的问题，我另写了一篇文章谈这个问题，<a href="/2020/09/30/sshgithub/">有报错才看哦</a><br>如果一路都很顺利，那恭喜你了，附上我的VuePress sub pages的路由：<a href="https://chikit-lo.github.io/vuepress">戳我</a>，欢迎体验spa类型的静态网页~</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
            <tag> VuePress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo快速搭建部署</title>
      <link href="2020/09/18/Hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"/>
      <url>2020/09/18/Hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo入魔"><a href="#Hexo入魔" class="headerlink" title="Hexo入魔"></a>Hexo入魔</h2><blockquote><p>最近两天都在折腾搭建免费的博客，偶然机会了解到Hexo这个开源静态博客框架，于是马上试了下，也遇到了不少坑，现在把遇到的问题记录下方便以后学习  </p></blockquote><h3 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h3><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><p>首先Hexo是基于Node.js的，因此需要先安装Node的运行环境，可以直接到Node官网下载对应版本：<br><a href="https://nodejs.org/zh-cn/download/">下载Node.js</a><br>安装完之后就可以使用npm工具安装各种模块了，这里我们可以配置一下淘宝镜像，加快下载速度：</p><pre><code class="shell">npm config registry https://registry.npm.taobao.org/ # 配置淘宝仓库npm config get registry # 查看仓库是否配置成功</code></pre><p>安装hexo可以使用全局安装或局部安装，我使用的是局部安装(因为强迫症)，我在桌面新建了一个名为hexo的目录，然后在控制台输入指令：</p><pre><code class="shell">cd Desktop/hexonpm init -ynpm i hexo</code></pre><p>这样就在hexo目录下把所需要的依赖下载好了，之后，初始化hexo，由于我采用的是局部安装，没有配置环境变量需要打指令的全路径，接着在控制台输入：</p><pre><code class="shell">./node_modules/hexo/bin/hexo init ./myblog</code></pre><p><code>hexo init [博客目录路径]</code>这个指令初始化了一个博客目录，会在当前目录/Users/jacklo/Desktop/hexo/下建一个myblog的文件夹，这个名字可以随便起，接着继续在命令行输入：</p><pre><code class="shell">cd myblognpm i</code></pre><p>这时就会从GitHub下载相关依赖，我尝试了几次都下载失败，在下载主题的时候一动不动，遇到这种情况，可以使用梯子，或者直接在hexo的仓库中<a href="https://github.com/hexojs/hexo.git">下载</a>  </p><hr><h4 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h4><p>我当时在控制台下载不了，最后时从仓库中下载下来的，把下载后的文件解压放进博客的目录即可，目录下的结构长这样：  </p><pre><code class="shell">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes  </code></pre><p>文件和目录的含义如下：<br><strong>_config.yml</strong>：网站的配置信息<br><strong>package.json</strong>：应用的信息<br><strong>scaffolds</strong>：模版的文件夹<br><strong>source</strong>：资源的文件夹<br><strong>themes</strong>：主题的文件夹<br>其中，themes目录里面是空的，我从GitHub上下载了<a href="https://github.com/blinkfox/hexo-theme-matery.git">matery</a>的主题，可以说里面该有的都有了，非常华丽<br>同样地也需要把下载后的文件解压后放到<strong>theme</strong>目录下，然后需要把<strong>_config.yml</strong>文件中<em>theme</em>的代码片段修改一下，下载到的主题目录文件名是<strong>hexo-theme-matery</strong>，<em>theme</em>后面的内容和文件名一致，但非常奇怪，我用原来的文件名启动服务的时候提示layout不存在，折腾了很久找不到原因，后来我把文件名改为<em>matery</em>后就解决了  </p><pre><code class="yml">theme: matery</code></pre><hr><h4 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h4><p>至此准备阶段的工作就可以了，外层目录hexo里边的内容其实可以不关心了，主要用的是myblog，但是每次输入只能都需要带全路径岂不是很麻烦么，当然麻烦，所以我们先修改一下package.json里面scripts里面的内容：</p><pre><code class="json">&quot;scripts&quot;: &#123;  &quot;build&quot;: &quot;hexo generate&quot;, // 生成静态文件  &quot;clean&quot;: &quot;hexo clean&quot;, // 清除缓存文件 (db.json) 和已生成的静态文件 (public)  &quot;deploy&quot;: &quot;hexo deploy&quot;, // 生成静态文件并部署网站  &quot;server&quot;: &quot;hexo server&quot;, // 启动服务器  &quot;cbs&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&quot;, // 本地部署时候输入: npm run cbs  &quot;cbd&quot;: &quot;hexo clean &amp;&amp; hexo g -d&quot; // 部署到git时候输入: npm run cbd&#125;</code></pre><p>可以看到，hexo为我们提供了几个脚本，分别是build/clean/deploy和server，方便起见我又自己添加了两个，分别用于本地和远程部署<br>那么让我们把博客在本地的服务器上运行下效果吧~接着在控制台输入：</p><pre><code class="shell">cd myblognpm run cbs</code></pre><p>控制台打印没有报错信息就可以了</p><pre><code class="shell">INFO  Validating configINFO  Start processingINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code></pre><p>浏览器访问<em><a href="http://localhost:4000/">http://localhost:4000</a></em>查看效果  </p><hr><h3 id="将项目部署到GitHub或者Gitee"><a href="#将项目部署到GitHub或者Gitee" class="headerlink" title="将项目部署到GitHub或者Gitee"></a>将项目部署到GitHub或者Gitee</h3><blockquote><p>由于国内访问GitHub不是特别的方便，特别是访问<em>github.io</em>时往往显示不可达，因此可以把项目同步放到Gitee  </p></blockquote><h4 id="GitHub仓库准备"><a href="#GitHub仓库准备" class="headerlink" title="GitHub仓库准备"></a>GitHub仓库准备</h4><p>首先<a href="https://github.com/">GitHub</a>需要新建一个仓库，仓库名称需要改为：<strong>[GitHub用户名称].github.io</strong></p><hr><h4 id="Gitee仓库准备"><a href="#Gitee仓库准备" class="headerlink" title="Gitee仓库准备"></a>Gitee仓库准备</h4><p>同样地，<a href="https://gitee.com/">Gitee</a>也需要新建一个仓库，仓库名称与GitHub就不一样了：直接使用自己的<strong>Gitee用户名</strong>就可以了  </p><hr><h4 id="修改主配置文件-config-yml"><a href="#修改主配置文件-config-yml" class="headerlink" title="修改主配置文件_config.yml"></a>修改主配置文件_config.yml</h4><p>在<strong>_config.yml</strong>中修改一下配置：</p><pre><code class="yml">deploy:  type: git  repo: [https://github.com/[GitHub用户名称]/[GitHub用户名称].github.io,https://gitee.com/[Gitee用户名]/[Gitee用户名].git] #需要替换两个仓库的用户名  branch: master</code></pre><hr><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>最后在命令行执行遗下指令：</p><pre><code class="shell">npm run cbd</code></pre><p>在Gitee提交变更以后再次浏览网页效果时会没有发生变化，这时候可以在仓库的Service-&gt;Gitee Pages中点击Update手动Deploy<br>在GitHub里面似乎不需要这样，每次提交完网页都会自动更新，但是如果自己的pc没有配置hosts文件的话往往会访问不到，这时候可以尝试以下操作：<br>首先把<strong>github.io</strong>的ip查出来，<a href="https://www.ipaddress.com/">戳我</a>，查到ip后可以设置本机的hosts文件，以mac系统为例：</p><pre><code class="shell">sodu vi /etc/hosts185.199.110.153 chikit-lo.github.io # 把自己的地址加到hosts文件中</code></pre><p>之后pc端就能正常访问了，但其他用户就不一定了，所以对国内的用户还不是特别的友好，于是才有了这个发布到两个仓库的尝试</p><hr><h3 id="其他的配置"><a href="#其他的配置" class="headerlink" title="其他的配置"></a>其他的配置</h3><p>主题里面的配置项有很多，可以根据自己的喜好去定制不同的参数项，matery的文档已经比较详细了，可以参考<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">官方的中文说明</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/17/Hello-World/"/>
      <url>2020/09/17/Hello-World/</url>
      
        <content type="html"><![CDATA[<h2 id="今天属于我的blog终于开张了～"><a href="#今天属于我的blog终于开张了～" class="headerlink" title="今天属于我的blog终于开张了～"></a>今天属于我的blog终于开张了～</h2><blockquote><p>很久之前我就憧憬某一天可以有自己的网站，不是注册就可以写网志的那种，而是需要自己动手组建的站点  </p></blockquote><p>折腾了一晚上，静态页面可以放到GitHub上，但访问有可能会有问题，pc端需要配置一下hosts</p><p>Hexo是个不错的开源博客框架，可以用markdown，正好适合练习，但页面的华丽程度就比较需要投入时间去改了，我偷懒clone了其他大神的插件  </p><p>我还在阿里云里面申请了一个免费使用一年的域名，之后还打算把一些应用部署到云服务器上面，最近在学前端的技术，并没有比服务器端的简单，而且很多如果不用一段时间就会忘光  </p><p>那从JavaScript开始，开始web全栈的旅程吧</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吐槽 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
